{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSArrayType = TSArrayType;\nexports.TSAsExpression = TSAsExpression;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConditionalType = TSConditionalType;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSConstructorType = TSConstructorType;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSFunctionType = TSFunctionType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSImportType = TSImportType;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSInferType = TSInferType;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSIntersectionType = TSIntersectionType;\nexports.TSIntrinsicKeyword = TSIntrinsicKeyword;\nexports.TSLiteralType = TSLiteralType;\nexports.TSMappedType = TSMappedType;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSNamedTupleMember = TSNamedTupleMember;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSOptionalType = TSOptionalType;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSPropertySignature = TSPropertySignature;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSRestType = TSRestType;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSThisType = TSThisType;\nexports.TSTupleType = TSTupleType;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeReference = TSTypeReference;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSUnionType = TSUnionType;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.tsPrintBraced = tsPrintBraced;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node, parent) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n\n  if (parent.type === \"ArrowFunctionExpression\" && node.params.length === 1) {\n    this.token(\",\");\n  }\n\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  const {\n    kind\n  } = node;\n\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly,\n    static: isStatic\n  } = node;\n\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSBigIntKeyword() {\n  this.word(\"bigint\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSIntrinsicKeyword() {\n  this.word(\"intrinsic\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters\n  } = node;\n  const parameters = node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  const returnType = node.typeAnnotation;\n  this.print(returnType.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n\n  this.print(node.parameterName);\n\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSNamedTupleMember(node) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    nameType,\n    optional,\n    readonly,\n    typeParameter\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz != null && extendz.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters\n  } = node;\n  const parameters = node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  const returnType = node.typeAnnotation;\n  this.print(returnType, node);\n}\n\nfunction tsPrintClassMemberModifiers(node, isField) {\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}","map":{"version":3,"sources":["/Users/uayevan/Desktop/ChessApp/client/node_modules/@babel/generator/lib/generators/typescript.js"],"names":["Object","defineProperty","exports","value","TSAnyKeyword","TSArrayType","TSAsExpression","TSBigIntKeyword","TSBooleanKeyword","TSCallSignatureDeclaration","TSConditionalType","TSConstructSignatureDeclaration","TSConstructorType","TSDeclareFunction","TSDeclareMethod","TSEnumDeclaration","TSEnumMember","TSExportAssignment","TSExpressionWithTypeArguments","TSExternalModuleReference","TSFunctionType","TSImportEqualsDeclaration","TSImportType","TSIndexSignature","TSIndexedAccessType","TSInferType","TSInterfaceBody","TSInterfaceDeclaration","TSIntersectionType","TSIntrinsicKeyword","TSLiteralType","TSMappedType","TSMethodSignature","TSModuleBlock","TSModuleDeclaration","TSNamedTupleMember","TSNamespaceExportDeclaration","TSNeverKeyword","TSNonNullExpression","TSNullKeyword","TSNumberKeyword","TSObjectKeyword","TSOptionalType","TSParameterProperty","TSParenthesizedType","TSPropertySignature","TSQualifiedName","TSRestType","TSStringKeyword","TSSymbolKeyword","TSThisType","TSTupleType","TSTypeAliasDeclaration","TSTypeAnnotation","TSTypeAssertion","TSTypeLiteral","TSTypeOperator","TSTypeParameter","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypePredicate","TSTypeQuery","TSTypeReference","TSUndefinedKeyword","TSUnionType","TSUnknownKeyword","TSVoidKeyword","tsPrintBraced","tsPrintClassMemberModifiers","tsPrintFunctionOrConstructorType","tsPrintPropertyOrMethodName","tsPrintSignatureDeclarationBase","tsPrintTypeLiteralOrInterfaceBody","tsPrintUnionOrIntersectionType","node","token","space","optional","print","typeAnnotation","parent","printList","params","type","length","word","name","constraint","default","accessibility","readonly","_param","parameter","declare","_functionHead","_classMethodHead","left","right","initializer","computed","key","kind","static","isStatic","_parameters","parameters","abstract","typeParameters","returnType","typeName","asserts","parameterName","exprName","members","indent","newline","member","dedent","rightBrace","elementType","elementTypes","label","sep","printJoin","types","separator","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","nameType","tokenIfPlusMinus","self","tok","literal","expression","id","extends","extendz","body","const","isConst","global","argument","qualifier","isExport","moduleReference","isField","override"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSArrayType = TSArrayType;\nexports.TSAsExpression = TSAsExpression;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConditionalType = TSConditionalType;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSConstructorType = TSConstructorType;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSFunctionType = TSFunctionType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSImportType = TSImportType;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSInferType = TSInferType;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSIntersectionType = TSIntersectionType;\nexports.TSIntrinsicKeyword = TSIntrinsicKeyword;\nexports.TSLiteralType = TSLiteralType;\nexports.TSMappedType = TSMappedType;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSNamedTupleMember = TSNamedTupleMember;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSOptionalType = TSOptionalType;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSPropertySignature = TSPropertySignature;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSRestType = TSRestType;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSThisType = TSThisType;\nexports.TSTupleType = TSTupleType;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeReference = TSTypeReference;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSUnionType = TSUnionType;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.tsPrintBraced = tsPrintBraced;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node, parent) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n\n  if (parent.type === \"ArrowFunctionExpression\" && node.params.length === 1) {\n    this.token(\",\");\n  }\n\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  const {\n    kind\n  } = node;\n\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly,\n    static: isStatic\n  } = node;\n\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSBigIntKeyword() {\n  this.word(\"bigint\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSIntrinsicKeyword() {\n  this.word(\"intrinsic\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters\n  } = node;\n  const parameters = node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  const returnType = node.typeAnnotation;\n  this.print(returnType.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n\n  this.print(node.parameterName);\n\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSNamedTupleMember(node) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    nameType,\n    optional,\n    readonly,\n    typeParameter\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz != null && extendz.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters\n  } = node;\n  const parameters = node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  const returnType = node.typeAnnotation;\n  this.print(returnType, node);\n}\n\nfunction tsPrintClassMemberModifiers(node, isField) {\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}"]},"metadata":{},"sourceType":"script"}