{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.traverseNode = traverseNode;\n\nvar _context = require(\"./context\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  VISITOR_KEYS\n} = _t;\n\nfunction traverseNode(node, opts, scope, state, path, skipKeys) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return false;\n  const context = new _context.default(scope, opts, state, path);\n\n  for (const key of keys) {\n    if (skipKeys && skipKeys[key]) continue;\n\n    if (context.visit(node, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/uayevan/Desktop/ChessApp/client/node_modules/@babel/traverse/lib/traverse-node.js"],"names":["Object","defineProperty","exports","value","traverseNode","_context","require","_t","VISITOR_KEYS","node","opts","scope","state","path","skipKeys","keys","type","context","default","key","visit"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBA,YAAvB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIC,EAAE,GAAGD,OAAO,CAAC,cAAD,CAAhB;;AAEA,MAAM;AACJE,EAAAA;AADI,IAEFD,EAFJ;;AAIA,SAASH,YAAT,CAAsBK,IAAtB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,IAAhD,EAAsDC,QAAtD,EAAgE;AAC9D,QAAMC,IAAI,GAAGP,YAAY,CAACC,IAAI,CAACO,IAAN,CAAzB;AACA,MAAI,CAACD,IAAL,EAAW,OAAO,KAAP;AACX,QAAME,OAAO,GAAG,IAAIZ,QAAQ,CAACa,OAAb,CAAqBP,KAArB,EAA4BD,IAA5B,EAAkCE,KAAlC,EAAyCC,IAAzC,CAAhB;;AAEA,OAAK,MAAMM,GAAX,IAAkBJ,IAAlB,EAAwB;AACtB,QAAID,QAAQ,IAAIA,QAAQ,CAACK,GAAD,CAAxB,EAA+B;;AAE/B,QAAIF,OAAO,CAACG,KAAR,CAAcX,IAAd,EAAoBU,GAApB,CAAJ,EAA8B;AAC5B,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.traverseNode = traverseNode;\n\nvar _context = require(\"./context\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  VISITOR_KEYS\n} = _t;\n\nfunction traverseNode(node, opts, scope, state, path, skipKeys) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return false;\n  const context = new _context.default(scope, opts, state, path);\n\n  for (const key of keys) {\n    if (skipKeys && skipKeys[key]) continue;\n\n    if (context.visit(node, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"script"}